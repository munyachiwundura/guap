// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "sqlite"
  url                  = "file:.dev.db"
  // referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @map(name: "refresh_token")
  access_token       String? @map(name: "access_token")
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @map(name: "id_token")
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  Notifications       Notifications[]
  Card                Card[]
  Transaction         Transaction[]
  TransactionCategory TransactionCategory[]
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Notifications {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  Date    DateTime
  title   String
  content String
  userId  String
}

model Card {
  id            String        @id @default(cuid())
  bank          String
  name          String
  accountNumber String
  accountType   String
  user          User          @relation(fields: [userId], references: [id])
  transactions  Transaction[]
  userId        String
  balance       Int
}

model Transaction {
  id                    String               @id @default(cuid())
  title                 String
  user                  User                 @relation(fields: [userId], references: [id])
  date                  DateTime             @default(now())
  ammount               Int
  Card                  Card?                @relation(fields: [cardId], references: [id])
  cardId                String?
  userId                String
  TransactionCategory   TransactionCategory? @relation(fields: [transactionCategoryId], references: [id])
  transactionCategoryId String?
}

model TransactionCategory {
  id           String        @id @default(cuid())
  color        String
  icon         String
  title        String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  userId       String
}
