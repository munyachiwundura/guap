import type {
  NextPage,
  InferGetServerSidePropsType,
  GetServerSideProps,
} from 'next';
import Head from 'next/head';
import Image from 'next/image';
import Card from '../components/card';
import CardsSelector from '../components/cardsSelector';
import IncomeDistribution from '../components/incomeDistribution';
import MonthlyBalance from '../components/monthlyBalance';
import MakeTransactionModal from '../components/makeTransactionModal';
import styles from '../styles/Home.module.css';
import TransactionItem from '../components/transactionItem';
import ExpensesDistribution from '../components/expensesDistribution';
import Backdrop from '../components/backdrop';
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import TransactionPreview from '../components/transactionPreview';
import CardPreview from '../components/cardPreview';
import { Card as CardType, Transaction } from '@prisma/client';
import prisma from '../lib/prisma';
import { getSession } from 'next-auth/react';

const Home: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = (
  props
) => {
  const [open, setOpen] = useState<string | boolean>(false);
  const [cards, setCards] = useState(props.cards);

  const getCards = async () => {
    const request = await fetch('/api/cards');
    const data = await request.json();

    setCards(data.request);

    if (!request.ok) {
      throw Error(request.statusText);
    }
    return data;
  };
  console.log('p', JSON.parse(props.transactions));
  useEffect(() => {
    getCards();
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        setOpen(false);
      }
    });
  }, []);

  type Transaction = {
    title: string;
    category: {
      color: string;
      icon: string;
      title: string;
    };
    date: string;
    ammount: number;
  };

  const transaction = [
    {
      card: {
        bank: 'absa',
        name: 'munyaradzi',
        accountType: 'Cheque',
        number: '5555 5555 5555 555',
      },
      ammount: -200,
      category: { color: '#65dfc9', icon: 'house', title: 'Home' },
      date: '12 February 2022 at 15: 16',
      title: 'Gas',
    },
    {
      card: {
        bank: 'absa',
        name: 'munyaradzi',
        accountType: 'Cheque',
        number: '5555 5555 5555 555',
      },
      ammount: 200,
      category: { color: '#3431c2', icon: 'house', title: 'Home' },
      date: '12 February 2022 at 15: 16',
      title: 'Gas',
    },
    {
      card: {
        bank: 'absa',
        name: 'munyaradzi',
        accountType: 'Cheque',
        number: '5555 5555 5555 555',
      },
      ammount: -200,
      category: { color: '#FF2C6B', icon: 'house', title: 'Home' },
      date: '12 February 2022 at 15: 16',
      title: 'Gas',
    },
  ];

  return (
    <div>
      <Head>
        <title>Guap</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      {open && (
        <Backdrop onClick={() => setOpen(false)}>
          {open === 'Card' && (
            <CardPreview card={transaction[0].card}>
              {transaction.map((x, y) => (
                <div key={y} onClick={() => setOpen('Transaction')}>
                  <TransactionItem
                    ammount={x.ammount}
                    category={x.category}
                    title={x.title}
                    date={x.date}
                  />
                </div>
              ))}
            </CardPreview>
          )}
          {open === 'MakeTransaction' && <MakeTransactionModal />}
          {open === 'Transaction' && (
            <TransactionPreview
              ammount={transaction[0].ammount}
              card={transaction[0].card}
              category={transaction[0].category}
              date={transaction[0].date}
              title={transaction[0].title}
            />
          )}
        </Backdrop>
      )}

      <main className="dark:bg-white/10 no_scrollbar bg-black/5 md:ml-[130px] md:mr-auto dark:text-white md:grid md:grid-cols-2 md:grid-rows-2 grid-rows-4 min-h-[90vh] mt-20 gap-6 p-8 overflow-y-scroll pb-[200px] md:pb-0 z-10 relative w-[80vw] rounded">
        {!open && (
          <motion.button
            layoutId="addTransaction"
            className="absolute p-3 top-6 text-md bg-black text-white rounded right-6"
            onClick={() => setOpen('MakeTransaction')}
          >
            Make Transaction
          </motion.button>
        )}
        <section>
          <div className="flex flex-col">
            <p>Hello, Welcome</p>
            <h1 className="text-3xl">Munyaradzi</h1>
          </div>
          <div className="dark:bg-white/10 dark:text-white relative p-5 rounded w-[100%] bg-white shadow-md">
            <h1 className=" text-xl font-bold top-0 left-6">Your Cards</h1>

            <CardsSelector>
              {cards.map((x: any, y: number) => (
                <Card
                  key={y}
                  onClick={() => setOpen('Card')}
                  accountType={x.accountType}
                  bank={x.bank}
                  name={x.name}
                  number={x.accountNumber}
                />
              ))}
            </CardsSelector>
          </div>
        </section>
        <section>
          <h1 className="text-3xl mt-6">Distribution</h1>
          <div className="flex w-[100%] justify-between md:flex-row flex-col">
            <IncomeDistribution />
            <ExpensesDistribution />
          </div>
        </section>
        <section>
          <h1 className="text-3xl">Monthly Balance</h1>
          <MonthlyBalance />
        </section>
        <section>
          <h1 className="text-3xl">Recent Transactions</h1>
          {JSON.parse(props.transactions)
            .slice(0, 4)
            .map((x: any, y: number) => (
              <div key={y} onClick={() => setOpen('Transaction')}>
                <TransactionItem
                  ammount={x.ammount}
                  category={x.TransactionCategory}
                  title={x.title}
                  date={x.date}
                />
              </div>
            ))}
        </section>
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const session = await getSession(ctx);

  if (!session) {
    ctx.res.writeHead(303, { Location: '/login' });
  }

  const requestCards = await prisma.card.findMany({
    where: {
      user: {
        email: session?.user?.email,
      },
    },
  });

  const requestTransactions = await prisma.transaction.findMany({
    where: {
      user: {
        email: session?.user?.email,
      },
    },
    include: {
      TransactionCategory: true,
    },
  });

  const transactions = JSON.stringify(requestTransactions);

  return {
    props: {
      cards: requestCards,
      user: session?.user,
      transactions: transactions,
    },
  };
};

export default Home;
