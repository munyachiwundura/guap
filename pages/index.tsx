import type {
  NextPage,
  InferGetServerSidePropsType,
  GetServerSideProps,
} from 'next';
import Head from 'next/head';
import Image from 'next/image';
import Card from '../components/card';
import CardsSelector from '../components/cardsSelector';
import IncomeDistribution from '../components/incomeDistribution';
import MonthlyBalance from '../components/monthlyBalance';
import MakeTransactionModal from '../components/makeTransactionModal';
import styles from '../styles/Home.module.css';
import TransactionItem from '../components/transactionItem';
import ExpensesDistribution from '../components/expensesDistribution';
import Backdrop from '../components/backdrop';
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import TransactionPreview from '../components/transactionPreview';
import CardPreview from '../components/cardPreview';
import { Card as CardType, Transaction } from '@prisma/client';
import prisma from '../lib/prisma';
import { getSession } from 'next-auth/react';
import Link from 'next/link';

const Home: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = (
  props
) => {
  const [open, setOpen] = useState<string | boolean>(false);
  const [selectTransaction, setSelectTransaction] = useState<any>();
  const [selectCard, setSelectCard] = useState<any>();
  const [cards, setCards] = useState(props.cards);

  const getCards = async () => {
    const request = await fetch('/api/cards');
    const data = await request.json();

    setCards(data.request);
    console.log('cards', cards, data.request);
    if (!request.ok) {
      throw Error(request.statusText);
    }
    return data;
  };
  console.log(props.income);
  useEffect(() => {
    getCards();
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        setOpen(false);
      }
    });
  }, []);

  return (
    <div>
      <Head>
        <title>Guap</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      {open && (
        <Backdrop onClick={() => setOpen(false)}>
          {open === 'Card' && (
            <CardPreview card={selectCard}>
              {JSON.parse(props.transactions)
                .filter((x: any) => x.cardId === selectCard.id)
                .slice(0, 4)
                .map((x: any, y: number) => (
                  <div
                    key={y}
                    onClick={() => {
                      setSelectTransaction(x);
                      setOpen('Transaction');
                    }}
                  >
                    <TransactionItem
                      ammount={x.ammount}
                      category={x.TransactionCategory}
                      title={x.title}
                      date={x.date}
                    />
                  </div>
                ))}
            </CardPreview>
          )}
          {open === 'MakeTransaction' && <MakeTransactionModal />}
          {open === 'Transaction' && (
            <TransactionPreview
              id={selectTransaction.id}
              ammount={selectTransaction?.ammount}
              card={selectTransaction.Card}
              category={selectTransaction.TransactionCategory}
              date={selectTransaction?.date}
              title={selectTransaction?.title}
            />
          )}
        </Backdrop>
      )}

      <main className="dark:bg-white/10 no_scrollbar bg-black/5 md:ml-[130px] md:mr-auto dark:text-white md:grid md:grid-cols-2 md:grid-rows-2 grid-rows-4 min-h-[90vh] mt-20 gap-6 p-8 overflow-y-scroll pb-[200px] md:pb-0 z-10 relative w-[80vw] rounded">
        {!open && (
          <motion.button
            layoutId="addTransaction"
            className="absolute p-3 top-6 text-md bg-black text-white rounded right-6"
            onClick={() => setOpen('MakeTransaction')}
          >
            Make Transaction
          </motion.button>
        )}
        <section>
          <div className="flex flex-col">
            <p>Hello, Welcome</p>
            <h1 className="text-3xl">Munyaradzi</h1>
          </div>
          <div className="dark:bg-white/10 dark:text-white relative p-5 rounded w-[100%] bg-white shadow-md">
            <h1 className=" text-xl font-bold top-0 left-6">Your Cards</h1>

            <CardsSelector>
              {cards.length !== 0 ? (
                cards.map((x: any, y: number) => (
                  <Card
                    key={y}
                    onClick={() => {
                      setSelectCard(x);
                      setOpen('Card');
                    }}
                    accountType={x.accountType}
                    bank={x.bank}
                    name={x.name}
                    number={x.accountNumber}
                  />
                ))
              ) : (
                <div className="flex items-center justify-center w-[135px] h-[85px] md:w-[335px] md:h-[185px] m-5 flex-shrink-0">
                  <h1 className="text-md font-semibold relative">
                    You do not have any cards to display please add a card at
                    <Link href="/wallet">
                      <a className="text-blue-500"> Wallet</a>
                    </Link>
                  </h1>
                </div>
              )}
            </CardsSelector>
          </div>
        </section>
        <section>
          <h1 className="text-3xl mt-6">Distribution</h1>
          <div className="flex w-[100%] justify-between md:flex-row flex-col">
            <IncomeDistribution data={props.income} />
            <ExpensesDistribution data={props.expenses} />
          </div>
        </section>
        <section>
          <h1 className="text-3xl">Monthly Balance</h1>
          <MonthlyBalance months={props.monthlyBalance} />
        </section>
        <section>
          <h1 className="text-3xl">Recent Transactions</h1>
          {props.transactions.length === 2 && (
            <h2 className="text-xl mt-6">
              <span
                className="text-blue-500 cursor-pointer"
                onClick={() => setOpen('MakeTransaction')}
              >
                Make some Transactions
              </span>{' '}
              and they will be displayed here
            </h2>
          )}
          {JSON.parse(props.transactions)
            .slice(0, 4)
            .map((x: any, y: number) => (
              <div
                key={y}
                onClick={() => {
                  setSelectTransaction(x);
                  setOpen('Transaction');
                }}
              >
                <TransactionItem
                  ammount={x.ammount}
                  category={x.TransactionCategory}
                  title={x.title}
                  date={x.date}
                />
              </div>
            ))}
        </section>
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const session = await getSession(ctx);

  if (!session) {
    return {
      redirect: {
        permanent: false,
        destination: '/login',
      },
    };
  }

  const requestCards = await prisma.card.findMany({
    where: {
      user: {
        email: session?.user?.email,
      },
    },
  });

  const requestTransactions = await prisma.transaction.findMany({
    where: {
      user: {
        email: session?.user?.email,
      },
    },
    include: {
      TransactionCategory: true,
      Card: true,
    },
  });

  const categories = await prisma.transactionCategory.findMany({
    where: {
      user: {
        email: session?.user?.email,
      },
    },
  });

  let income = [];
  let expenses = [];

  for (let i = 0; i < categories.length; i++) {
    let monthlyIncome: any = {};
    monthlyIncome['title'] = categories[i].title;
    monthlyIncome['color'] = categories[i].color;
    monthlyIncome['ammount'] = requestTransactions
      .filter((x) => x.transactionCategoryId === categories[i].id)
      .filter((x) => x.ammount > 0)
      .reduce((y, x) => y + x.ammount, 0);

    monthlyIncome.ammount > 0 && income.push(monthlyIncome);
  }
  for (let i = 0; i < categories.length; i++) {
    let monthlyExpenses: any = {};
    monthlyExpenses['title'] = categories[i].title;
    monthlyExpenses['color'] = categories[i].color;
    monthlyExpenses['ammount'] = requestTransactions
      .filter((x) => x.transactionCategoryId === categories[i].id)
      .filter((x) => x.ammount < 0)
      .reduce((y, x) => y + x.ammount, 0);
    monthlyExpenses.ammount < 0 && expenses.push(monthlyExpenses);
  }

  let monthNames = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec',
  ];
  let months = [];
  for (let i = 0; i < monthNames.length; i++) {
    let month: any = {};
    month['balance'] = requestTransactions
      .filter((x) => x.date.getMonth() === i)
      .reduce((y, x) => y + x.ammount, 0);
    month['month'] = monthNames[i];
    months.push(month);
  }

  const balance = requestTransactions.reduce((y, x) => y + x.ammount, 0);

  const transactions = JSON.stringify(requestTransactions);
  console.log(
    requestTransactions.map((x) => x.TransactionCategory),
    'Monthly Income'
  );

  return {
    props: {
      cards: requestCards,
      user: session?.user,
      transactions: transactions,
      income: income,
      expenses: expenses,
      monthlyBalance: months,
      Balance: balance,
    },
  };
};

export default Home;
